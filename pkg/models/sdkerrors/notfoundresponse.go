// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"errors"
	"github.com/speakeasy-sdks/apideck-go/pkg/utils"
)

// Schemas2 - Contains parameter or domain specific information related to the error and why it occurred.
type Schemas2 struct {
}

type SchemasDetailType string

const (
	SchemasDetailTypeStr      SchemasDetailType = "str"
	SchemasDetailTypeSchemas2 SchemasDetailType = "Schemas_2"
)

type SchemasDetail struct {
	Str      *string
	Schemas2 *Schemas2

	Type SchemasDetailType
}

func CreateSchemasDetailStr(str string) SchemasDetail {
	typ := SchemasDetailTypeStr

	return SchemasDetail{
		Str:  &str,
		Type: typ,
	}
}

func CreateSchemasDetailSchemas2(schemas2 Schemas2) SchemasDetail {
	typ := SchemasDetailTypeSchemas2

	return SchemasDetail{
		Schemas2: &schemas2,
		Type:     typ,
	}
}

func (u *SchemasDetail) UnmarshalJSON(data []byte) error {

	schemas2 := Schemas2{}
	if err := utils.UnmarshalJSON(data, &schemas2, "", true, true); err == nil {
		u.Schemas2 = &schemas2
		u.Type = SchemasDetailTypeSchemas2
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = SchemasDetailTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SchemasDetail) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Schemas2 != nil {
		return utils.MarshalJSON(u.Schemas2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type NotFoundResponse struct {
	// Contains parameter or domain specific information related to the error and why it occurred.
	Detail *SchemasDetail `json:"detail,omitempty"`
	// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
	Error_ *string `json:"error,omitempty"`
	// A human-readable message providing more details about the error.
	Message *string `json:"message,omitempty"`
	// Link to documentation of error type
	Ref *string `json:"ref,omitempty"`
	// HTTP status code
	StatusCode *float64 `json:"status_code,omitempty"`
	// The type of error returned
	TypeName *string `json:"type_name,omitempty"`
}

var _ error = &NotFoundResponse{}

func (e *NotFoundResponse) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
