// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/apideck-go/pkg/types"
	"github.com/speakeasy-sdks/apideck-go/pkg/utils"
	"time"
)

type JobBlocks struct {
	Content *string `json:"content,omitempty"`
	Title   *string `json:"title,omitempty"`
}

func (o *JobBlocks) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *JobBlocks) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

// JobBranch - Details of the branch for which the job is created.
type JobBranch struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// Name of the branch.
	Name *string `json:"name,omitempty"`
}

func (o *JobBranch) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *JobBranch) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type JobEmploymentTerms string

const (
	JobEmploymentTermsFullTime   JobEmploymentTerms = "full-time"
	JobEmploymentTermsPartTime   JobEmploymentTerms = "part-time"
	JobEmploymentTermsInternship JobEmploymentTerms = "internship"
	JobEmploymentTermsContractor JobEmploymentTerms = "contractor"
	JobEmploymentTermsEmployee   JobEmploymentTerms = "employee"
	JobEmploymentTermsFreelance  JobEmploymentTerms = "freelance"
	JobEmploymentTermsTemp       JobEmploymentTerms = "temp"
	JobEmploymentTermsSeasonal   JobEmploymentTerms = "seasonal"
	JobEmploymentTermsVolunteer  JobEmploymentTerms = "volunteer"
	JobEmploymentTermsOther      JobEmploymentTerms = "other"
)

func (e JobEmploymentTerms) ToPointer() *JobEmploymentTerms {
	return &e
}

func (e *JobEmploymentTerms) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "full-time":
		fallthrough
	case "part-time":
		fallthrough
	case "internship":
		fallthrough
	case "contractor":
		fallthrough
	case "employee":
		fallthrough
	case "freelance":
		fallthrough
	case "temp":
		fallthrough
	case "seasonal":
		fallthrough
	case "volunteer":
		fallthrough
	case "other":
		*e = JobEmploymentTerms(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobEmploymentTerms: %v", v)
	}
}

type JobLinksType string

const (
	JobLinksTypeJobPortal      JobLinksType = "job_portal"
	JobLinksTypeJobDescription JobLinksType = "job_description"
)

func (e JobLinksType) ToPointer() *JobLinksType {
	return &e
}

func (e *JobLinksType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "job_portal":
		fallthrough
	case "job_description":
		*e = JobLinksType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobLinksType: %v", v)
	}
}

type JobLinks struct {
	Type *JobLinksType `json:"type,omitempty"`
	URL  *string       `json:"url,omitempty"`
}

func (o *JobLinks) GetType() *JobLinksType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *JobLinks) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type JobSalary struct {
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency *Currency `json:"currency,omitempty"`
	Interval *string   `json:"interval,omitempty"`
	// Maximum salary payable for the job role.
	Max *int64 `json:"max,omitempty"`
	// Minimum salary payable for the job role.
	Min *int64 `json:"min,omitempty"`
}

func (o *JobSalary) GetCurrency() *Currency {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *JobSalary) GetInterval() *string {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *JobSalary) GetMax() *int64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *JobSalary) GetMin() *int64 {
	if o == nil {
		return nil
	}
	return o.Min
}

// JobVisibility - The visibility of the job
type JobVisibility string

const (
	JobVisibilityDraft    JobVisibility = "draft"
	JobVisibilityPublic   JobVisibility = "public"
	JobVisibilityInternal JobVisibility = "internal"
)

func (e JobVisibility) ToPointer() *JobVisibility {
	return &e
}

func (e *JobVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "public":
		fallthrough
	case "internal":
		*e = JobVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobVisibility: %v", v)
	}
}

type Job struct {
	Addresses []Address `json:"addresses,omitempty"`
	// Specifies whether an employee of the organization can apply for the job.
	AvailableToEmployees *bool       `json:"available_to_employees,omitempty"`
	Blocks               []JobBlocks `json:"blocks,omitempty"`
	// Details of the branch for which the job is created.
	Branch      *JobBranch  `json:"branch,omitempty"`
	Closing     *string     `json:"closing,omitempty"`
	ClosingDate *types.Date `json:"closing_date,omitempty"`
	// The closing section of the job description in HTML format
	ClosingHTML *string `json:"closing_html,omitempty"`
	// The code of the job.
	Code         *string `json:"code,omitempty"`
	Confidential *bool   `json:"confidential,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy    *string       `json:"created_by,omitempty"`
	CustomFields []CustomField `json:"custom_fields,omitempty"`
	// Flag to indicate if the object is deleted.
	Deleted    *bool       `json:"deleted,omitempty"`
	Department *Department `json:"department,omitempty"`
	// A description of the object.
	Description *string `json:"description,omitempty"`
	// The job description in HTML format
	DescriptionHTML *string             `json:"description_html,omitempty"`
	EmploymentTerms *JobEmploymentTerms `json:"employment_terms,omitempty"`
	// Level of experience required for the job role.
	Experience     *string  `json:"experience,omitempty"`
	Followers      []string `json:"followers,omitempty"`
	HiringManagers []string `json:"hiring_managers,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// URL of the job portal
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	JobPortalURL *string `json:"job_portal_url,omitempty"`
	// language code according to ISO 639-1. For the United States - EN
	Language *string    `json:"language,omitempty"`
	Links    []JobLinks `json:"links,omitempty"`
	// Specifies the location for the job posting.
	Location    *string    `json:"location,omitempty"`
	OwnerID     *string    `json:"owner_id,omitempty"`
	PublishedAt *time.Time `json:"published_at,omitempty"`
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	RecordURL *string `json:"record_url,omitempty"`
	// The recruiter is generally someone who is tasked to help the hiring manager find and screen qualified applicant
	Recruiters []string `json:"recruiters,omitempty"`
	// Specifies whether the posting is for a remote job.
	Remote *bool `json:"remote,omitempty"`
	// A job's Requisition ID (Req ID) allows your organization to identify and track a job based on alphanumeric naming conventions unique to your company's internal processes.
	RequisitionID *string    `json:"requisition_id,omitempty"`
	Salary        *JobSalary `json:"salary,omitempty"`
	// Sequence in relation to other jobs.
	Sequence *int64  `json:"sequence,omitempty"`
	Slug     *string `json:"slug,omitempty"`
	// The status of the job.
	Status *JobStatus `json:"status,omitempty"`
	Tags   []string   `json:"tags,omitempty"`
	// The job title of the person.
	Title *string `json:"title,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// URL of the job description
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	URL *string `json:"url,omitempty"`
	// The visibility of the job
	Visibility *JobVisibility `json:"visibility,omitempty"`
}

func (j Job) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(j, "", false)
}

func (j *Job) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &j, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Job) GetAddresses() []Address {
	if o == nil {
		return nil
	}
	return o.Addresses
}

func (o *Job) GetAvailableToEmployees() *bool {
	if o == nil {
		return nil
	}
	return o.AvailableToEmployees
}

func (o *Job) GetBlocks() []JobBlocks {
	if o == nil {
		return nil
	}
	return o.Blocks
}

func (o *Job) GetBranch() *JobBranch {
	if o == nil {
		return nil
	}
	return o.Branch
}

func (o *Job) GetClosing() *string {
	if o == nil {
		return nil
	}
	return o.Closing
}

func (o *Job) GetClosingDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.ClosingDate
}

func (o *Job) GetClosingHTML() *string {
	if o == nil {
		return nil
	}
	return o.ClosingHTML
}

func (o *Job) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Job) GetConfidential() *bool {
	if o == nil {
		return nil
	}
	return o.Confidential
}

func (o *Job) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Job) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Job) GetCustomFields() []CustomField {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Job) GetDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *Job) GetDepartment() *Department {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *Job) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Job) GetDescriptionHTML() *string {
	if o == nil {
		return nil
	}
	return o.DescriptionHTML
}

func (o *Job) GetEmploymentTerms() *JobEmploymentTerms {
	if o == nil {
		return nil
	}
	return o.EmploymentTerms
}

func (o *Job) GetExperience() *string {
	if o == nil {
		return nil
	}
	return o.Experience
}

func (o *Job) GetFollowers() []string {
	if o == nil {
		return nil
	}
	return o.Followers
}

func (o *Job) GetHiringManagers() []string {
	if o == nil {
		return nil
	}
	return o.HiringManagers
}

func (o *Job) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Job) GetJobPortalURL() *string {
	if o == nil {
		return nil
	}
	return o.JobPortalURL
}

func (o *Job) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *Job) GetLinks() []JobLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *Job) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *Job) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *Job) GetPublishedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.PublishedAt
}

func (o *Job) GetRecordURL() *string {
	if o == nil {
		return nil
	}
	return o.RecordURL
}

func (o *Job) GetRecruiters() []string {
	if o == nil {
		return nil
	}
	return o.Recruiters
}

func (o *Job) GetRemote() *bool {
	if o == nil {
		return nil
	}
	return o.Remote
}

func (o *Job) GetRequisitionID() *string {
	if o == nil {
		return nil
	}
	return o.RequisitionID
}

func (o *Job) GetSalary() *JobSalary {
	if o == nil {
		return nil
	}
	return o.Salary
}

func (o *Job) GetSequence() *int64 {
	if o == nil {
		return nil
	}
	return o.Sequence
}

func (o *Job) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *Job) GetStatus() *JobStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Job) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Job) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Job) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Job) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Job) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *Job) GetVisibility() *JobVisibility {
	if o == nil {
		return nil
	}
	return o.Visibility
}
