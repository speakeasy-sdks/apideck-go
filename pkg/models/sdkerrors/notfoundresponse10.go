// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"errors"
	"github.com/speakeasy-sdks/apideck-sample-sdk/pkg/utils"
)

// NotFoundResponseDetail2 - Contains parameter or domain specific information related to the error and why it occurred.
type NotFoundResponseDetail2 struct {
}

var _ error = &NotFoundResponseDetail2{}

func (e *NotFoundResponseDetail2) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}

type NotFoundResponseDetail10Type string

const (
	NotFoundResponseDetail10TypeStr                     NotFoundResponseDetail10Type = "str"
	NotFoundResponseDetail10TypeNotFoundResponseDetail2 NotFoundResponseDetail10Type = "NotFoundResponse_detail_2"
)

type NotFoundResponseDetail10 struct {
	Str                     *string
	NotFoundResponseDetail2 *NotFoundResponseDetail2

	Type NotFoundResponseDetail10Type
}

func CreateNotFoundResponseDetail10Str(str string) NotFoundResponseDetail10 {
	typ := NotFoundResponseDetail10TypeStr

	return NotFoundResponseDetail10{
		Str:  &str,
		Type: typ,
	}
}

func CreateNotFoundResponseDetail10NotFoundResponseDetail2(notFoundResponseDetail2 NotFoundResponseDetail2) NotFoundResponseDetail10 {
	typ := NotFoundResponseDetail10TypeNotFoundResponseDetail2

	return NotFoundResponseDetail10{
		NotFoundResponseDetail2: &notFoundResponseDetail2,
		Type:                    typ,
	}
}

func (u *NotFoundResponseDetail10) UnmarshalJSON(data []byte) error {

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = NotFoundResponseDetail10TypeStr
		return nil
	}

	notFoundResponseDetail2 := new(NotFoundResponseDetail2)
	if err := utils.UnmarshalJSON(data, &notFoundResponseDetail2, "", true, true); err == nil {
		u.NotFoundResponseDetail2 = notFoundResponseDetail2
		u.Type = NotFoundResponseDetail10TypeNotFoundResponseDetail2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NotFoundResponseDetail10) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.NotFoundResponseDetail2 != nil {
		return utils.MarshalJSON(u.NotFoundResponseDetail2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type NotFoundResponse10 struct {
	// Contains parameter or domain specific information related to the error and why it occurred.
	Detail *NotFoundResponseDetail10 `json:"detail,omitempty"`
	// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
	Error_ *string `json:"error,omitempty"`
	// A human-readable message providing more details about the error.
	Message *string `json:"message,omitempty"`
	// Link to documentation of error type
	Ref *string `json:"ref,omitempty"`
	// HTTP status code
	StatusCode *float64 `json:"status_code,omitempty"`
	// The type of error returned
	TypeName *string `json:"type_name,omitempty"`
}

var _ error = &NotFoundResponse10{}

func (e *NotFoundResponse10) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
