// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EmailType - Email type
type EmailType string

const (
	EmailTypePrimary   EmailType = "primary"
	EmailTypeSecondary EmailType = "secondary"
	EmailTypeWork      EmailType = "work"
	EmailTypePersonal  EmailType = "personal"
	EmailTypeBilling   EmailType = "billing"
	EmailTypeOther     EmailType = "other"
)

func (e EmailType) ToPointer() *EmailType {
	return &e
}

func (e *EmailType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "primary":
		fallthrough
	case "secondary":
		fallthrough
	case "work":
		fallthrough
	case "personal":
		fallthrough
	case "billing":
		fallthrough
	case "other":
		*e = EmailType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmailType: %v", v)
	}
}

type Email struct {
	// Email address
	Email *string `json:"email"`
	// Unique identifier for the email address
	ID *string `json:"id,omitempty"`
	// Email type
	Type *EmailType `json:"type,omitempty"`
}

func (o *Email) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *Email) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Email) GetType() *EmailType {
	if o == nil {
		return nil
	}
	return o.Type
}
