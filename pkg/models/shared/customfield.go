// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/apideck-go/pkg/utils"
)

type CustomFieldValue4 struct {
}

type CustomFieldValueType string

const (
	CustomFieldValueTypeStr               CustomFieldValueType = "str"
	CustomFieldValueTypeNumber            CustomFieldValueType = "number"
	CustomFieldValueTypeBoolean           CustomFieldValueType = "boolean"
	CustomFieldValueTypeCustomFieldValue4 CustomFieldValueType = "CustomField_value_4"
	CustomFieldValueTypeArrayOfstr        CustomFieldValueType = "arrayOfstr"
)

type CustomFieldValue struct {
	Str               *string
	Number            *float64
	Boolean           *bool
	CustomFieldValue4 *CustomFieldValue4
	ArrayOfstr        []string

	Type CustomFieldValueType
}

func CreateCustomFieldValueStr(str string) CustomFieldValue {
	typ := CustomFieldValueTypeStr

	return CustomFieldValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateCustomFieldValueNumber(number float64) CustomFieldValue {
	typ := CustomFieldValueTypeNumber

	return CustomFieldValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateCustomFieldValueBoolean(boolean bool) CustomFieldValue {
	typ := CustomFieldValueTypeBoolean

	return CustomFieldValue{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateCustomFieldValueCustomFieldValue4(customFieldValue4 CustomFieldValue4) CustomFieldValue {
	typ := CustomFieldValueTypeCustomFieldValue4

	return CustomFieldValue{
		CustomFieldValue4: &customFieldValue4,
		Type:              typ,
	}
}

func CreateCustomFieldValueArrayOfstr(arrayOfstr []string) CustomFieldValue {
	typ := CustomFieldValueTypeArrayOfstr

	return CustomFieldValue{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *CustomFieldValue) UnmarshalJSON(data []byte) error {

	customFieldValue4 := CustomFieldValue4{}
	if err := utils.UnmarshalJSON(data, &customFieldValue4, "", true, true); err == nil {
		u.CustomFieldValue4 = &customFieldValue4
		u.Type = CustomFieldValueTypeCustomFieldValue4
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CustomFieldValueTypeStr
		return nil
	}

	number := float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CustomFieldValueTypeNumber
		return nil
	}

	boolean := false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CustomFieldValueTypeBoolean
		return nil
	}

	arrayOfstr := []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfstr, "", true, true); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = CustomFieldValueTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CustomFieldValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.CustomFieldValue4 != nil {
		return utils.MarshalJSON(u.CustomFieldValue4, "", true)
	}

	if u.ArrayOfstr != nil {
		return utils.MarshalJSON(u.ArrayOfstr, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CustomField struct {
	// More information about the custom field
	Description *string `json:"description,omitempty"`
	// Unique identifier for the custom field.
	ID *string `json:"id"`
	// Name of the custom field.
	Name  *string           `json:"name,omitempty"`
	Value *CustomFieldValue `json:"value,omitempty"`
}

func (o *CustomField) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CustomField) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CustomField) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomField) GetValue() *CustomFieldValue {
	if o == nil {
		return nil
	}
	return o.Value
}
