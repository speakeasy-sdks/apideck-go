// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/apideck-sample-sdk/pkg/utils"
)

// UnexpectedErrorResponseDetail2 - Contains parameter or domain specific information related to the error and why it occurred.
type UnexpectedErrorResponseDetail2 struct {
}

type UnexpectedErrorResponseDetailType string

const (
	UnexpectedErrorResponseDetailTypeStr                            UnexpectedErrorResponseDetailType = "str"
	UnexpectedErrorResponseDetailTypeUnexpectedErrorResponseDetail2 UnexpectedErrorResponseDetailType = "UnexpectedErrorResponse_detail_2"
)

type UnexpectedErrorResponseDetail struct {
	Str                            *string
	UnexpectedErrorResponseDetail2 *UnexpectedErrorResponseDetail2

	Type UnexpectedErrorResponseDetailType
}

func CreateUnexpectedErrorResponseDetailStr(str string) UnexpectedErrorResponseDetail {
	typ := UnexpectedErrorResponseDetailTypeStr

	return UnexpectedErrorResponseDetail{
		Str:  &str,
		Type: typ,
	}
}

func CreateUnexpectedErrorResponseDetailUnexpectedErrorResponseDetail2(unexpectedErrorResponseDetail2 UnexpectedErrorResponseDetail2) UnexpectedErrorResponseDetail {
	typ := UnexpectedErrorResponseDetailTypeUnexpectedErrorResponseDetail2

	return UnexpectedErrorResponseDetail{
		UnexpectedErrorResponseDetail2: &unexpectedErrorResponseDetail2,
		Type:                           typ,
	}
}

func (u *UnexpectedErrorResponseDetail) UnmarshalJSON(data []byte) error {

	unexpectedErrorResponseDetail2 := new(UnexpectedErrorResponseDetail2)
	if err := utils.UnmarshalJSON(data, &unexpectedErrorResponseDetail2, "", true, true); err == nil {
		u.UnexpectedErrorResponseDetail2 = unexpectedErrorResponseDetail2
		u.Type = UnexpectedErrorResponseDetailTypeUnexpectedErrorResponseDetail2
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = UnexpectedErrorResponseDetailTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u UnexpectedErrorResponseDetail) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UnexpectedErrorResponseDetail2 != nil {
		return utils.MarshalJSON(u.UnexpectedErrorResponseDetail2, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UnexpectedErrorResponse struct {
	// Contains parameter or domain specific information related to the error and why it occurred.
	Detail *UnexpectedErrorResponseDetail `json:"detail,omitempty"`
	// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
	Error *string `json:"error,omitempty"`
	// A human-readable message providing more details about the error.
	Message *string `json:"message,omitempty"`
	// Link to documentation of error type
	Ref *string `json:"ref,omitempty"`
	// HTTP status code
	StatusCode *float64 `json:"status_code,omitempty"`
	// The type of error returned
	TypeName *string `json:"type_name,omitempty"`
}

func (o *UnexpectedErrorResponse) GetDetail() *UnexpectedErrorResponseDetail {
	if o == nil {
		return nil
	}
	return o.Detail
}

func (o *UnexpectedErrorResponse) GetError() *string {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *UnexpectedErrorResponse) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *UnexpectedErrorResponse) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *UnexpectedErrorResponse) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *UnexpectedErrorResponse) GetTypeName() *string {
	if o == nil {
		return nil
	}
	return o.TypeName
}
